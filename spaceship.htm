<html>
<head>
    <title>SpaceShip</title>
    <meta http-equiv="content-type" content="text/html; charset=windows-1252">

    <script type="text/javascript" src="gl-matrix.js"></script>
    <script type="text/javascript" src="game-utils.js"></script>
    <script type="text/javascript" src="fbo.js"></script>
    <script type="text/javascript" src="heightfield.js"></script>
    <script type="text/javascript" src="background.js"></script>
    <script type="text/javascript" src="modelObj.js"></script>
    <script type="text/javascript" src="splat.js"></script>
    <script type="text/javascript" src="libs/jQuery.js"></script>

    <script id="heightfield-vs" type="x-shader/x-vertex">#version 300 es
      // *** le vertex shader ***
      layout(location=0) in vec3 aVertexPosition; // la position du sommet 
      layout(location=1) in vec2 aVertexCoord; // sa coordonnee de texture 

      out vec2 vTextureCoord; // on souhaite rasteriser la coordonnee

      void main(void) {
          // projection de la position
          gl_Position = vec4(aVertexPosition, 1.0);

          // stockage de la coordonnee de texture
          vTextureCoord = aVertexCoord;
      }

    </script>

    <script id="heightfield-fs" type="x-shader/x-fragment">#version 300 es
      // *** le fragment shader ***
      precision highp float; // precision des nombres flottant

      uniform vec2 uOffset;
      uniform float uAmplitude; // amplitude du bruit
      uniform float uFrequency; // frequence du bruit
      uniform float uPersistence; // persistence du bruit

    in vec2 vTextureCoord; // recuperation de la coord rasterisee

      out vec4 outColor;
      
      float hash(vec2 p) {
	  // pseudo random fonction
	  float h = dot(mod(p,vec2(100.0)),vec2(127.1,311.7));
	  return -1.0 + 2.0*fract(sin(h)*43758.5453123);
      }

      float vnoise(in vec2 p) {
	  // genere une valeur random sur une position sp√©cifique d'une grille
	  // pris sur shadertoy
	  vec2 i = floor(p);
	  vec2 f = fract(p);

	  vec2 u = f*f*(3.0-2.0*f);

	  return mix( mix( hash( i + vec2(0.0,0.0) ),
			   hash( i + vec2(1.0,0.0) ), u.x),
                      mix( hash( i + vec2(0.0,1.0) ),
			   hash( i + vec2(1.0,1.0) ), u.x), u.y);
      }

      float fractalNoise(in vec2 p) {
	  const int nb = 5; // nb octave
	  float f = uFrequency; // frequency
	  float a = uAmplitude; // amplitude
	  float e = uPersistence; // persistence

	  float n = 0.0;
	  for(int i=0;i<nb;++i) {
              n = n + a*vnoise(p*f);
              f = 2.0*f;
              a = a*e;
	  }
	  return n;
      }

      void main(void) {
	  vec2 p = vTextureCoord*2.0-vec2(1.0); // coordonnees
	  float n = fractalNoise(p+uOffset)*0.5+0.5; // bruit
	  //n = n*smoothstep(0.0,0.1,n); // surface plate (eau)
	  outColor = vec4(vec3(n),1.0);

      }

    </script>

    <script id="background-vs" type="x-shader/x-vertex">#version 300 es
      // *** le vertex shader ***
      layout(location=0) in vec3 aVertexPosition; // la position du sommet
      layout(location=1) in vec2 aVertexCoord; // sa coordonnee de texture

      out vec2 vTextureCoord; // on souhaite rasteriser la coordonnee

      void main(void) {
          // projection de la position
          gl_Position = vec4(aVertexPosition, 1.0);

          // stockage de la coordonnee de texture
          vTextureCoord = aVertexCoord;
      }

    </script>

    <script id="background-fs" type="x-shader/x-fragment">#version 300 es
      // *** le fragment shader ***
      precision highp float; // precision des nombres flottant

      uniform sampler2D uHeightfield; // la texture de hauteurs
    in vec2 vTextureCoord; // recuperation de la coord rasterisee
      out vec4 outColor;

      vec3 computeNormal() {
	  const float scale = 20.0;

	  vec2 ps = 1.0/vec2(textureSize(uHeightfield,0));
	  float xp = texture(uHeightfield,vTextureCoord+vec2( ps.x,0.0)).x;
	  float xm = texture(uHeightfield,vTextureCoord+vec2(-ps.x,0.0)).x;
	  float yp = texture(uHeightfield,vTextureCoord+vec2(0.0, ps.y)).x;
	  float ym = texture(uHeightfield,vTextureCoord+vec2(0.0,-ps.y)).x;

	  float gx = 0.5*(xp-xm)*scale;
	  float gy = 0.5*(yp-ym)*scale;

	  vec3 v1 = normalize(vec3(1.0,0.0,gx));
	  vec3 v2 = normalize(vec3(0.0,1.0,gy));

	  return cross(v1,v2);
      }

      void main(void) {
	  float d = texture(uHeightfield,vTextureCoord).x;
        d = max(d,0.);
        vec3 n = computeNormal();
	       vec3 l = normalize(vec3(1.,1.,1.));
	       vec3 r = reflect(l,n);
	       vec3 v = vec3(0.,0.,-1);
        vec3 color;
        if(d < .1) {
            color = normalize(vec3(1, 49, 180));
        } else if(d < .5) {
            color = normalize(vec3(34, 100, 15));
        } else {
            color = normalize(vec3(153, 81, 43));
        }
            color.x *= d;
            color.y *= d;
        vec3 ks = vec3(0.,0.,0.);
        float q = 20.;
        float diff = max(dot(l,n), 0.);
        float spec = pow(max(dot(r, v), 0.), q);
        vec3 finalColor = color * diff + (ks*spec);


        outColor = vec4(finalColor,1.0);
    }



    </script>

    <script id="model-vs" type="x-shader/x-vertex">#version 300 es
      // *** le vertex shader ***
      layout(location=0) in vec3 aVertexPosition;
      layout(location=1) in vec3 aVertexNormal;

      uniform mat4 uModelMatrix;
      uniform mat4 uViewMatrix;
      uniform mat4 uProjMatrix;

      out vec3 vNormal;

      void main(void) {
          // projection de la position
          gl_Position = uProjMatrix * uViewMatrix * uModelMatrix * vec4(aVertexPosition, 1.0);
          vNormal = mat3(inverse(transpose(uViewMatrix * uModelMatrix)))*normalize(aVertexNormal);
      }

    </script>

    <script id="model-fs" type="x-shader/x-fragment">#version 300 es
      // *** le fragment shader ***
      precision mediump float; // precision des nombres flottant

    in vec3 vNormal;
      out vec4 outColor;

      void main(void) {
          // la couleur est attribuee au fragment courant

	       vec3 n = normalize(vNormal);
	       vec3 l = normalize(vec3(1.,1.,1.));
	       vec3 r = reflect(l,n);
	       vec3 v = vec3(0.,0.,-1);

	       vec3 Kd = vec3(2.,1.,0.);
	       vec3 Ks = vec3(1.,1.,0.);
	       float q = 20.;

	       float diff = max(dot(l,n),0.);
	       float spec = pow(max(dot(r,n),0.),q);

	       vec3 finalColor = Kd*diff + Ks*spec;

          outColor = vec4(finalColor,1.);
      }

    </script>

    <script id="splat-vs" type="x-shader/x-vertex">#version 300 es
      // *** le vertex shader ***
      layout(location=0) in vec3 aVertexPosition; // la position du sommet
      layout(location=1) in vec2 aVertexCoord; // sa coordonnee de texture

      uniform vec2 uPosition; // position du vaisseau
      out vec2 vTextureCoord; // on souhaite rasteriser la coordonnee

      void main(void) {
	  // projection de la position
	  gl_Position = vec4(aVertexPosition+vec3(uPosition,0.0), 1.0);

	  // stockage de la coordonnee de texture
	  vTextureCoord = aVertexCoord;
      }

    </script>

    <script id="splat-fs" type="x-shader/x-fragment">#version 300 es
      // *** le fragment shader ***
      precision highp float; // precision des nombres flottant

    in vec2 vTextureCoord; // recuperation de la coord rasterisee
      out vec4 outColor;
      uniform sampler2D uTex; //ressource de la texture
      void main(void) {
	  float alpha = 1.-smoothstep(0.2,0.25,distance(vec2(.5),vTextureCoord));
	  //outColor = vec4(alpha*vec3(1,0,0),alpha);
	  outColor = texture(uTex, vTextureCoord);
      }

    </script>

    <script type="text/javascript">
        var fbo;
        var heightfield;
        var background;
        var spaceship;
        var shootSample, specialShoot;
        const speed = 0.15;
        var prece;

        function drawScene() {
            // initialisation du viewport
            gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);

            // efface les buffers de couleur et de profondeur
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

            // A DECOMMENTER POUR TRAVAILLER SUR LE FOND
            // creation des hauteurs dans une texture
             gl.bindFramebuffer(gl.FRAMEBUFFER,fbo.id());

             gl.useProgram(heightfield.shader());
             heightfield.sendUniformVariables();
             heightfield.draw();

             gl.bindFramebuffer(gl.FRAMEBUFFER, null);
             gl.useProgram(background.shader());
             background.sendUniformVariables();
             background.draw();

            gl.useProgram(spaceship.shader());
            spaceship.sendUniformVariables();
            spaceship.draw();

            // test pour afficher un splat quand on appuie sur espace
            // activation de la transparence
            gl.enable(gl.BLEND);
            gl.useProgram(shootSample.shader());
            $.each(splatsArray, function(k,v){
                v.sendUniformVariables();
                v.draw();
            });
            // on desactive la transparence
            gl.disable(gl.BLEND);
        }

        // une bonne maniere de gerer les evenements claviers
        var currentlyPressedKeys = {};
        var splatsArray = [];

        function handleKeyDown(event) {
            currentlyPressedKeys[event.keyCode] = true;
        }


        function handleKeyUp(event) {
            currentlyPressedKeys[event.keyCode] = false;
        }

        function handleKeys() {
            if (currentlyPressedKeys[33]) {
                // Page Up (par exemple)
                // faire quelque chose...
            }
            // vous pouvez utiliser ce genre de fonction
            // pour faire bouger votre vaisseau



            if (currentlyPressedKeys[68] && (prece === "S" || prece === "Z")) { // D
                spaceship.move(0, speed*0.707);
                prece = "D";
            }else if(currentlyPressedKeys[68]){
                spaceship.move(0, speed);
                prece = "D";
            }

            if (currentlyPressedKeys[81] && (prece === "S" || prece === "Z")) { // Q
                spaceship.move(0, -speed*0.707);
                prece = "Q";
            }else if(currentlyPressedKeys[81]){
                spaceship.move(0, -speed);
                prece = "Q";
            }

            if (currentlyPressedKeys[90] && (prece === "Q" || prece === "D")) { // Z
                spaceship.move(speed*0.707, 0);
                prece = "Z";
            }else if(currentlyPressedKeys[90] ){
                spaceship.move(speed, 0);
                prece = "Z";
            }

            if (currentlyPressedKeys[83] && (prece === "Q" || prece === "D")) { // S
                spaceship.move(-speed*0.707, 0);
                prece = "S";
            }else if(currentlyPressedKeys[83]){
                spaceship.move(-speed, 0);
                prece = "S";
            }

            if (currentlyPressedKeys[77]) { // M
                // just a test to clear a splat
                shootSample.clear();
            }

            if (currentlyPressedKeys[32]) { // SPACE
                // if (splatsArray[splatsArray.length-1]==null || splatsArray[splatsArray.length-1].getPosX() > 0.5) {
                if (splatsArray[splatsArray.length-1]==null || splatsArray[splatsArray.length-1].getPosX() > splatsArray[splatsArray.length-1].getPosDebut()+1.5 ) {
                    // just to test how a aplat works
                    var newSplat = new Splat(0);
                    splatsArray.push(newSplat);
                    var frontShip = spaceship.getBBox();
                    newSplat.setPosition((frontShip[0][0] + frontShip[1][0]) / 2, frontShip[0][1]);
                     newSplat.setPosDebut(frontShip[0][1]);
                }

            }

        }

        function mouseMove(event) {
            // recup evenement souris
            //var newx = 2.0*(event.clientX/gl.viewportWidth)-1.0;
            //var newy = -(2.0*(event.clientY/gl.viewportHeight)-1.0);
        }


        // animation
        var lastTime = 0;

        function animate() {
            var timeNow = new Date().getTime();
            if (lastTime != 0) {
                // anime chacun des objets de la scene
                // si necessaire (en fonction du temps ecoulÔøΩ)
                var elapsed = timeNow - lastTime;
                heightfield.setParameters(elapsed);
                spaceship.setParameters(elapsed);
                background.setParameters(elapsed);
                for (const splat in splatsArray) {
                    if (splatsArray[splat].getPosX() < 10) {
                        splatsArray[splat].setParameters(elapsed);
                    } else {
                        splatsArray.splice(splatsArray[splat],1);
                    }
                }


            }
            lastTime = timeNow;
        }

        function tick() {
            requestAnimFrame(tick);
            handleKeys();
            drawScene();
            animate();
        }


        function webGLStart() {
            // initialisation du canvas et des objets OpenGL
            var canvas = document.getElementById("SpaceShip");
            initGL(canvas);

            fbo = new FBO(canvas.width, canvas.height, 1, false);

            initHeightfieldShader();
            initBackgroundShader();
            initModelShader();
            initSplatShader();

            heightfield = new Heightfield();
            background = new Background(fbo.texture(0));
            spaceship = new Model('models/plane.obj');
            shootSample = new Splat(null,spaceship.getZ());
            specialShoot = new Splat(null, spaceship.getZ(), true);


            // la couleur de fond sera noire
            gl.clearColor(0.0, 0.0, 0.0, 1.0);

            // active le teste de profondeur
            gl.enable(gl.DEPTH_TEST);
            gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);

            /* Mouse and keyboard interaction functions */
            //canvas.addEventListener('mousedown', tbMouseDown, true);
            //canvas.addEventListener('mousemove', mouseMove, true);
            //canvas.addEventListener('mouseup', tbMouseUp, true);
            document.onkeydown = handleKeyDown;
            document.onkeyup = handleKeyUp;

            // dessine la scene
            tick();
        }


    </script>


</head>


<body onload="webGLStart();">
<canvas id="SpaceShip" style="border: none;" width="800" height="800"></canvas>
</body>
</html>
